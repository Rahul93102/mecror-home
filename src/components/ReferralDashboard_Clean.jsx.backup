import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  LineChart, Line, BarChart, Bar, PieChart, Pie, Cell, 
  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer 
} from 'recharts';
import { 
  Users, Network, TrendingUp, Target, Award, 
  Activity, BarChart3, Shield, Settings, Info, Database, GitBranch,
  Menu, X
} from 'lucide-react';
import ReferralNetwork from '../utils/ReferralNetwork';
import { FloatingDock } from './ui/FloatingDock';
import { HomeIcon, NetworkIcon, ChartIcon, UserGroupIcon, SettingsIcon, ExpandIcon, CollapseIcon, SidebarIcon, GraphIcon } from './ui/Icons';


const animationStyles = `
  @keyframes float {
    0%, 100% { transform: translate(0, 0) scale(1); opacity: 0.7; }
    25% { transform: translate(50px, -50px) scale(1.1); opacity: 1; }
    50% { transform: translate(-25px, -75px) scale(0.9); opacity: 0.8; }
    75% { transform: translate(-50px, 50px) scale(1.05); opacity: 0.9; }
  }
  
  @keyframes pulse-glow {
    0%, 100% { box-shadow: 0 0 20px rgba(99, 102, 241, 0.4); }
    50% { box-shadow: 0 0 40px rgba(99, 102, 241, 0.8); }
  }
  
  @keyframes gradient-shift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
  
  @keyframes shine {
    0% { left: -100%; }
    100% { left: 100%; }
  }
  
  @media (max-width: 768px) {
    .sidebar-controls {
      flex-direction: column;
      gap: 0.5rem;
    }
    .sidebar-controls button {
      padding: 0.6rem 1rem;
      font-size: 0.8rem;
    }
  }
  
  @media (max-width: 480px) {
    .dashboard-header h1 {
      font-size: 2rem !important;
    }
    .dashboard-header p {
      font-size: 1rem !important;
    }
  }
`;

const ReferralDashboard = () => {
  const [network] = useState(() => new ReferralNetwork());
  const [stats, setStats] = useState(null);
  const [simulationData, setSimulationData] = useState([]);
  const [activeTab, setActiveTab] = useState('graph-structure');
  const [loading, setLoading] = useState(true);
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [sidebarVisible, setSidebarVisible] = useState(true);
  const [selectedCandidates, setSelectedCandidates] = useState(new Set());
  const [animatedStats, setAnimatedStats] = useState({
    totalUsers: 0,
    totalReferrals: 0,
    avgReferrals: 0,
    networkDensity: 0
  });
  
  const toggleCandidateSelection = (userId) => {
    const newSelected = new Set(selectedCandidates);
    if (newSelected.has(userId)) {
      newSelected.delete(userId);
    } else {
      newSelected.add(userId);
    }
    setSelectedCandidates(newSelected);
  };



  //  navigation Bar 
  const navigationItems = [
    { id: 'graph-structure', label: 'Graph Structure', icon: GitBranch },
    { id: 'network-reach', label: 'Network Reach', icon: Network },
    { id: 'influencers', label: 'Influencers', icon: Users },
    { id: 'simulation', label: 'Simulation', icon: Activity },
    { id: 'optimization', label: 'Optimization', icon: Target }
  ];





  useEffect(() => {
    // Inject CSS animations
    const styleElement = document.createElement('style');
    styleElement.textContent = animationStyles;
    document.head.appendChild(styleElement);
    
    const initializeNetwork = async () => {
      try {
        const users = Array.from({ length: 100 }, (_, i) => `user_${String(i + 1).padStart(3, '0')}`);
        
        // Build hierarchical referral structure
        for (let i = 0; i < 20; i++) {
          const rootUser = users[i];
          for (let j = 0; j < Math.floor(Math.random() * 4) + 1; j++) {
            const candidateIndex = 20 + (i * 4) + j;
            if (candidateIndex < users.length) {
              try {
                network.addReferral(rootUser, users[candidateIndex]);
              } catch (error) {
                continue;
              }
            }
          }
        }

        // Add second level referrals
        for (let i = 20; i < 60; i++) {
          if (Math.random() > 0.6) {
            const candidateIndex = 60 + Math.floor(Math.random() * 20);
            if (candidateIndex < users.length) {
              try {
                network.addReferral(users[i], users[candidateIndex]);
              } catch (error) {
                continue;
              }
            }
          }
        }

        // Add random referrals
        for (let i = 0; i < 30; i++) {
          try {
            const referrerIndex = Math.floor(Math.random() * 80);
            const candidateId = `new_candidate_${i + 1}`;
            network.addReferral(users[referrerIndex], candidateId);
          } catch (error) {
            continue;
          }
        }

        const networkStats = network.getNetworkStats();
        setStats(networkStats);

        // Generate simulation data
        const simulations = {
          conservative: network.simulate(0.2, 30),
          moderate: network.simulate(0.35, 30),
          aggressive: network.simulate(0.5, 30)
        };

        const simulationChartData = simulations.conservative.map((conservative, index) => ({
          day: index + 1,
          conservative: conservative,
          moderate: simulations.moderate[index] || 0,
          aggressive: simulations.aggressive[index] || 0,
          growth: index > 0 ? conservative - simulations.conservative[index - 1] : conservative
        }));

        setSimulationData(simulationChartData);
        setLoading(false);
      } catch (error) {
        console.error('Error initializing network:', error);
        setLoading(false);
      }
    };

    initializeNetwork();
  }, [network]);

  // Animate counter values with staggered timing
  useEffect(() => {
    if (!stats) return;

    const animateValue = (key, target, delay = 0) => {
      setTimeout(() => {
        const duration = 2500;
        const steps = 60;
        const stepValue = target / steps;
        let current = 0;
        
        const timer = setInterval(() => {
          current += stepValue;
          if (current >= target) {
            current = target;
            clearInterval(timer);
          }
          
          setAnimatedStats(prev => ({
            ...prev,
            [key]: key === 'avgReferrals' || key === 'networkDensity' 
              ? parseFloat(current.toFixed(1)) 
              : Math.floor(current)
          }));
        }, duration / steps);
      }, delay);
    };


    animateValue('totalUsers', stats.totalUsers, 0);
    animateValue('totalReferrals', stats.totalReferrals, 300);
    animateValue('avgReferrals', stats.avgReferralsPerUser, 600);
    animateValue('networkDensity', (stats.totalReferrals / (stats.totalUsers || 1)) * 10, 900);
  }, [stats]);

  const COLORS = ['#000000', '#333333', '#666666', '#999999', '#cccccc'];
  const GRADIENT_COLORS = ['#667eea', '#764ba2', '#f093fb', '#f5576c', '#4facfe', '#00f2fe'];
  const CHART_COLORS = {
    primary: '#1a1a1a',
    secondary: '#4a5568',
    accent: '#667eea',
    success: '#48bb78',
    warning: '#ed8936',
    error: '#f56565',
    gradient1: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
    gradient2: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
    gradient3: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',
    gradient4: 'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)',
    gradient5: 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)'
  };

  // Render content based on active tab
  const renderContent = () => {
    switch (activeTab) {
      case 'graph-structure':
        return renderGraphStructure();
      case 'network-reach':
        return renderNetworkReach();
      case 'influencers':
        return renderInfluencers();
      case 'simulation':
        return renderSimulation();
      case 'optimization':
        return renderOptimization();
      default:
        return renderGraphStructure();
    }
  };

  // Graph Structure Tab
  const renderGraphStructure = () => (
    <div style={{ 
      display: 'grid', 
      gridTemplateColumns: '1fr 1.2fr', 
      gap: '2rem',
      padding: '1rem',
      minHeight: '600px'
    }}>
      {/* Network Statistics Panel - Left Side */}
      <motion.div 
        initial={{ opacity: 0, x: -20 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ duration: 0.6 }}
        style={{
          background: 'rgba(255, 255, 255, 0.95)',
          borderRadius: '20px',
          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
          border: '1px solid rgba(255, 255, 255, 0.2)',
          overflow: 'hidden',
          backdropFilter: 'blur(20px)'
        }}
      >

        <div style={{
          padding: '1.5rem 2rem 1rem 2rem',
          borderBottom: '1px solid rgba(0, 0, 0, 0.05)'
        }}>
          <div style={{ 
            display: 'flex', 
            alignItems: 'center', 
            gap: '0.75rem',
            marginBottom: '0.5rem'
          }}>
            <div style={{
              width: '32px',
              height: '32px',
              borderRadius: '8px',
              background: 'linear-gradient(135deg, #667eea, #764ba2)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '1rem'
            }}>
              📊
            </div>
            <h3 style={{ 
              color: '#1e293b',
              fontSize: '1.25rem', 
              fontWeight: '700',
              margin: 0,
              letterSpacing: '-0.02em'
            }}>
              Network Statistics
            </h3>
          </div>
          <div style={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'flex-end'
          }}>
            <div style={{
              width: '8px',
              height: '8px',
              borderRadius: '50%',
              background: '#10b981',
              marginRight: '0.5rem'
            }}></div>
            <span style={{
              color: '#64748b',
              fontSize: '0.75rem',
              fontWeight: '500',
              textTransform: 'uppercase',
              letterSpacing: '0.5px'
            }}>
              Live Data
            </span>
          </div>
        </div>
        

        <div style={{ 
          padding: '1.5rem',
          display: 'grid', 
          gap: '1rem'
        }}>
          {[
            { 
              label: 'TOTAL USERS', 
              value: animatedStats.totalUsers, 
              icon: '👥', 
              gradient: 'linear-gradient(135deg, #ec4899 0%, #be185d 100%)',
              bgColor: '#fdf2f8'
            },
            { 
              label: 'TOTAL REFERRALS', 
              value: animatedStats.totalReferrals, 
              icon: '🔗', 
              gradient: 'linear-gradient(135deg, #22c55e 0%, #16a34a 100%)',
              bgColor: '#f0fdf4'
            },
            { 
              label: 'AVERAGE REFERRALS', 
              value: animatedStats.avgReferrals, 
              icon: '📈', 
              gradient: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
              bgColor: '#fffbeb'
            },
            { 
              label: 'NETWORK DENSITY', 
              value: `${animatedStats.networkDensity}%`, 
              icon: '🌐', 
              gradient: 'linear-gradient(135deg, #6366f1 0%, #4f46e5 100%)',
              bgColor: '#eef2ff'
            }
          ].map((stat, index) => (
            <motion.div 
              key={stat.label}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1, duration: 0.5 }}
              whileHover={{ 
                scale: 1.02,
                y: -2
              }}
              style={{ 
                background: stat.bgColor,
                borderRadius: '16px',
                padding: '1.25rem',
                border: '1px solid rgba(0, 0, 0, 0.04)',
                position: 'relative',
                cursor: 'pointer',
                transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)'
              }}
            >

              <div style={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
                marginBottom: '0.75rem'
              }}>
                <div style={{
                  width: '40px',
                  height: '40px',
                  borderRadius: '12px',
                  background: stat.gradient,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '1.25rem',
                  boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)'
                }}>
                  {stat.icon}
                </div>
                <div style={{
                  width: '6px',
                  height: '6px',
                  borderRadius: '50%',
                  background: '#d1d5db'
                }}></div>
              </div>
              
              {/* Label */}
              <div style={{ 
                color: '#64748b', 
                fontWeight: '600', 
                fontSize: '0.75rem',
                letterSpacing: '0.5px',
                marginBottom: '0.5rem'
              }}>
                {stat.label}
              </div>
              

              <motion.div 
                animate={{ scale: [1, 1.02, 1] }}
                transition={{ duration: 2, repeat: Infinity, delay: index * 0.2 }}
                style={{ 
                  color: '#1e293b',
                  fontWeight: '800', 
                  fontSize: '1.875rem',
                  lineHeight: '1'
                }}
              >
                {stat.value}
              </motion.div>
            </motion.div>
          ))}
        </div>
      </motion.div>


      <motion.div 
        initial={{ opacity: 0, x: 20 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ duration: 0.6, delay: 0.2 }}
        style={{
          background: 'rgba(255, 255, 255, 0.95)',
          borderRadius: '20px',
          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
          border: '1px solid rgba(255, 255, 255, 0.2)',
          overflow: 'hidden',
          backdropFilter: 'blur(20px)'
        }}
      >
        {/* Header with icon and title */}
        <div style={{
          padding: '1.5rem 2rem 1rem 2rem',
          borderBottom: '1px solid rgba(0, 0, 0, 0.05)'
        }}>
          <div style={{ 
            display: 'flex', 
            alignItems: 'center', 
            gap: '0.75rem',
            marginBottom: '0.5rem'
          }}>
            <div style={{
              width: '32px',
              height: '32px',
              borderRadius: '8px',
              background: 'linear-gradient(135deg, #f59e0b, #d97706)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '1rem'
            }}>
              🏆
            </div>
            <h3 style={{ 
              color: '#1e293b',
              fontSize: '1.25rem', 
              fontWeight: '700',
              margin: 0,
              letterSpacing: '-0.02em'
            }}>
              Top Referrers
            </h3>
          </div>
          <div style={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'flex-end'
          }}>
            <span style={{
              color: '#64748b',
              fontSize: '0.875rem',
              fontWeight: '500'
            }}>
              ⋯
            </span>
          </div>
        </div>


        <div style={{ 
          padding: '1.5rem 2rem 2rem 2rem',
          height: 'calc(100% - 80px)',
          minHeight: '400px',
          background: '#ffffff',
          borderRadius: '0 0 20px 20px',
          position: 'relative',
          overflow: 'hidden'
        }}>

          <div style={{
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            background: 'radial-gradient(circle at 20% 30%, rgba(30, 58, 138, 0.03) 0%, transparent 50%), radial-gradient(circle at 80% 70%, rgba(30, 64, 175, 0.03) 0%, transparent 50%)',
            animation: 'float 15s ease-in-out infinite',
            zIndex: 0
          }}></div>


          {[...Array(6)].map((_, i) => {
            const colors = [
              'rgba(139, 92, 246, 0.4)',   
              'rgba(236, 72, 153, 0.4)',  
              'rgba(6, 182, 212, 0.4)',   
              'rgba(16, 185, 129, 0.4)',  
              'rgba(245, 158, 11, 0.4)',  
              'rgba(99, 102, 241, 0.4)'  
            ];
            return (
              <motion.div
                key={i}
                initial={{ 
                  x: Math.random() * 100 + '%',
                  y: Math.random() * 100 + '%',
                  opacity: 0
                }}
                animate={{ 
                  x: [
                    Math.random() * 100 + '%',
                    Math.random() * 100 + '%',
                    Math.random() * 100 + '%'
                  ],
                  y: [
                    Math.random() * 100 + '%',
                    Math.random() * 100 + '%',
                    Math.random() * 100 + '%'
                  ],
                  opacity: [0, 0.6, 0]
                }}
                transition={{
                  duration: 8 + Math.random() * 4,
                  repeat: Infinity,
                  delay: Math.random() * 5,
                  ease: 'easeInOut'
                }}
                style={{
                  position: 'absolute',
                  width: '4px',
                  height: '4px',
                  borderRadius: '50%',
                  background: colors[i],
                  boxShadow: `0 0 8px ${colors[i]}`,
                  zIndex: 1
                }}
              />
            );
          })}


          <div style={{ 
            position: 'relative', 
            zIndex: 2, 
            width: '100%', 
            height: '100%' 
          }}>
            <ResponsiveContainer width="100%" height="100%">
              <BarChart 
                data={stats ? stats.topReferrers.slice(0, 5).map((user, index) => ({ 
                  user: `usr_${user.userId.slice(-3)}`, 
                  referrals: user.referralCount
                })) : [
                  { user: 'usr_001', referrals: 15 },
                  { user: 'usr_002', referrals: 12 },
                  { user: 'usr_003', referrals: 10 },
                  { user: 'usr_004', referrals: 8 },
                  { user: 'usr_005', referrals: 6 }
                ]}
                margin={{ top: 20, right: 30, left: 20, bottom: 40 }}
              >
                <defs>
                  <linearGradient id="purpleGradient" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor="#8b5cf6" />
                    <stop offset="50%" stopColor="#7c3aed" />
                    <stop offset="100%" stopColor="#6d28d9" />
                  </linearGradient>
                  <linearGradient id="pinkGradient" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor="#ec4899" />
                    <stop offset="50%" stopColor="#db2777" />
                    <stop offset="100%" stopColor="#be185d" />
                  </linearGradient>
                  <linearGradient id="cyanGradient" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor="#06b6d4" />
                    <stop offset="50%" stopColor="#0891b2" />
                    <stop offset="100%" stopColor="#0e7490" />
                  </linearGradient>
                  <linearGradient id="emeraldGradient" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor="#10b981" />
                    <stop offset="50%" stopColor="#059669" />
                    <stop offset="100%" stopColor="#047857" />
                  </linearGradient>
                  <linearGradient id="amberGradient" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor="#f59e0b" />
                    <stop offset="50%" stopColor="#d97706" />
                    <stop offset="100%" stopColor="#b45309" />
                  </linearGradient>
                </defs>
                
                <CartesianGrid 
                  strokeDasharray="2 4" 
                  stroke="rgba(0, 0, 0, 0.08)" 
                  vertical={false}
                />
                <XAxis 
                  dataKey="user" 
                  stroke="#64748b" 
                  fontSize={11}
                  fontWeight="600"
                  tick={{ fill: '#64748b' }}
                  axisLine={false}
                  tickLine={false}
                />
                <YAxis 
                  stroke="#64748b" 
                  fontSize={11}
                  fontWeight="600"
                  tick={{ fill: '#64748b' }}
                  axisLine={false}
                  tickLine={false}
                />
                <Tooltip 
                  contentStyle={{ 
                    background: 'rgba(255, 255, 255, 0.98)',
                    border: '1px solid rgba(0, 0, 0, 0.1)',
                    borderRadius: '12px',
                    color: '#1e293b',
                    boxShadow: '0 10px 40px rgba(0, 0, 0, 0.15)',
                    backdropFilter: 'blur(20px)',
                    fontSize: '0.875rem',
                    fontWeight: '600'
                  }}
                  formatter={(value, name) => [
                    `${value} referrals`,
                    'Total Referrals'
                  ]}
                  labelFormatter={(label) => `User: ${label}`}
                  cursor={{ fill: 'rgba(0, 0, 0, 0.02)' }}
                />
                <Bar 
                  dataKey="referrals" 
                  radius={[8, 8, 0, 0]}
                  maxBarSize={50}
                >
                  {(stats ? stats.topReferrers.slice(0, 5) : Array(5).fill({})).map((entry, index) => {
                    const colors = [
                      '#8b5cf6', // Purple
                      '#ec4899', // Pink
                      '#06b6d4', // Cyan
                      '#10b981', // Emerald
                      '#f59e0b'  // Amber
                    ];
                    return (
                      <Cell 
                        key={`cell-${index}`} 
                        fill={colors[index]}
                      />
                    );
                  })}
                </Bar>
              </BarChart>
            </ResponsiveContainer>
          </div>

          {/* Subtle blue glow effect at bottom */}
          <div style={{
            position: 'absolute',
            bottom: '0',
            left: '0',
            right: '0',
            height: '40px',
            background: 'linear-gradient(to top, rgba(30, 64, 175, 0.03) 0%, transparent 100%)',
            borderRadius: '0 0 20px 20px',
            zIndex: 1
          }}></div>
        </div>
      </motion.div>
    </div>
  );


  const renderNetworkReach = () => {
    // Get network reach data
    const reachData = Array.from(network.users).map(userId => ({
      userId,
      directReferrals: network.getDirectReferrals(userId).length,
      totalReach: network.getTotalReferralCount(userId),
      reachExpansion: network.getTotalReferralCount(userId) - network.getDirectReferrals(userId).length
    })).filter(user => user.totalReach > 0).sort((a, b) => b.totalReach - a.totalReach);

    const topReferrersByReach = network.getTopReferrersByReach(10);

    return (
      <div style={{ width: '100%' }}>
        {/* Full width header */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          style={{
            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 50%, #667eea 100%)',
            backgroundSize: '200% 200%',
            animation: 'gradient-shift 12s ease infinite',
            padding: '2rem',
            borderRadius: '25px',
            boxShadow: '0 25px 50px rgba(102, 126, 234, 0.4)',
            border: '1px solid rgba(255, 255, 255, 0.2)',
            marginBottom: '2rem',
            position: 'relative',
            overflow: 'hidden'
          }}
        >
          {/* Background particles */}
          <div style={{
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            background: 'radial-gradient(circle at 25% 25%, rgba(255,255,255,0.1) 0%, transparent 50%), radial-gradient(circle at 75% 75%, rgba(255,255,255,0.1) 0%, transparent 50%)',
            animation: 'float 20s ease-in-out infinite',
            zIndex: 0
          }}></div>

          <h3 style={{ 
            background: 'linear-gradient(90deg, #fff 0%, #f0f8ff 50%, #fff 100%)',
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent',
            backgroundSize: '200% 100%',
            animation: 'gradient-shift 8s ease infinite',
            marginBottom: '1rem', 
            fontSize: '2rem', 
            fontWeight: '800',
            letterSpacing: '-0.5px',
            position: 'relative',
            zIndex: 1,
            textAlign: 'center'
          }}>
            🌐 Full Network Reach Analysis (Part 2)
          </h3>
          <p style={{
            color: 'rgba(255, 255, 255, 0.9)',
            fontSize: '1.1rem',
            textAlign: 'center',
            margin: 0,
            position: 'relative',
            zIndex: 1,
            textShadow: '0 1px 2px rgba(0,0,0,0.3)'
          }}>
            Total referral count including direct and indirect referrals using BFS traversal
          </p>
        </motion.div>

        {/* Main grid layout */}
        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr', gap: '2rem', width: '100%' }}>
          {/* Network Reach Visualization */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6 }}
            whileHover={{ scale: 1.01, y: -3 }}
            style={{
              background: '#ffffff',
              borderRadius: '25px',
              boxShadow: '0 12px 40px rgba(0,0,0,0.08)',
              border: '1px solid rgba(0,0,0,0.05)',
              overflow: 'hidden',
              position: 'relative'
            }}
          >
            {/* Top 20% Header Section */}
            <div style={{
              height: '20%',
              minHeight: '80px',
              background: 'linear-gradient(135deg, #43e97b, #38f9d7)',
              padding: '1.5rem 2rem',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
              position: 'relative'
            }}>
              {/* Animated background */}
              <div style={{
                position: 'absolute',
                top: 0,
                left: 0,
                width: '100%',
                height: '100%',
                backgroundImage: 'radial-gradient(circle at 20% 80%, rgba(255,255,255,0.15) 0%, transparent 50%), radial-gradient(circle at 80% 20%, rgba(255,255,255,0.15) 0%, transparent 50%)',
                animation: 'float 18s ease-in-out infinite reverse'
              }}></div>

              <h4 style={{ 
                color: '#ffffff', 
                fontSize: '1.5rem', 
                fontWeight: '700',
                textShadow: '0 2px 4px rgba(0,0,0,0.2)',
                position: 'relative',
                zIndex: 1,
                margin: 0
              }}>
                📈 Reach vs Direct Referrals Comparison
              </h4>
              
              <div style={{
                width: '12px',
                height: '12px',
                borderRadius: '50%',
                background: 'rgba(255,255,255,0.6)',
                position: 'relative',
                zIndex: 1
              }}></div>
            </div>
            
            {/* Bottom 80% Content Section */}
            <div style={{ 
              height: '80%',
              minHeight: '400px', 
              padding: '2rem',
              background: '#ffffff'
            }}>
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={reachData.slice(0, 12)}>
                  <CartesianGrid strokeDasharray="3 3" stroke="rgba(0,0,0,0.1)" />
                  <XAxis 
                    dataKey="userId" 
                    stroke="#64748b" 
                    fontSize={12}
                    tickFormatter={(value) => value.slice(-6)}
                  />
                  <YAxis stroke="#64748b" fontSize={12} />
                  <Tooltip 
                    contentStyle={{ 
                      backgroundColor: '#ffffff', 
                      border: '1px solid rgba(0,0,0,0.1)',
                      borderRadius: '12px',
                      color: '#1e293b',
                      boxShadow: '0 8px 32px rgba(0,0,0,0.12)'
                    }}
                    formatter={(value, name) => [
                      value, 
                      name === 'directReferrals' ? 'Direct Referrals' : 'Total Reach'
                    ]}
                    labelFormatter={(userId) => `User: ${userId}`}
                  />
                  <Legend />
                  <Bar 
                    dataKey="directReferrals" 
                    fill="#43e97b"
                    name="Direct Referrals"
                    radius={[4, 4, 0, 0]}
                  />
                  <Bar 
                    dataKey="totalReach" 
                    fill="#38f9d7"
                    name="Total Network Reach"
                    radius={[4, 4, 0, 0]}
                  />
                  <defs>
                    <linearGradient id="directGradient" x1="0" y1="0" x2="0" y2="1">
                      <stop offset="0%" stopColor="#ff6b6b" />
                      <stop offset="100%" stopColor="#ee5a52" />
                    </linearGradient>
                    <linearGradient id="reachGradient" x1="0" y1="0" x2="0" y2="1">
                      <stop offset="0%" stopColor="#4ecdc4" />
                      <stop offset="100%" stopColor="#44a08d" />
                    </linearGradient>
                  </defs>
                </BarChart>
              </ResponsiveContainer>
            </div>
          </motion.div>

          {/* Top Referrers by Reach - Enhanced UI */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            style={{
              background: 'rgba(255, 255, 255, 0.95)',
              borderRadius: '25px',
              boxShadow: '0 12px 40px rgba(0, 0, 0, 0.08)',
              border: '1px solid rgba(255, 255, 255, 0.2)',
              overflow: 'hidden',
              backdropFilter: 'blur(20px)'
            }}
          >
            {/* Header */}
            <div style={{
              height: '20%',
              minHeight: '80px',
              background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
              padding: '1.5rem 2rem',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
              position: 'relative'
            }}>
              {/* Animated background pattern */}
              <div style={{
                position: 'absolute',
                top: 0,
                left: 0,
                width: '100%',
                height: '100%',
                backgroundImage: 'radial-gradient(circle at 30% 80%, rgba(255,255,255,0.15) 0%, transparent 50%), radial-gradient(circle at 70% 30%, rgba(255,255,255,0.15) 0%, transparent 50%)',
                animation: 'float 15s ease-in-out infinite reverse'
              }}></div>
              
              <h4 style={{ 
                color: '#ffffff', 
                fontSize: '1.4rem', 
                fontWeight: '700',
                textShadow: '0 2px 4px rgba(0,0,0,0.2)',
                position: 'relative',
                zIndex: 1,
                margin: 0
              }}>
                🏆 Top Referrer Candidates
              </h4>
              
              <div style={{
                width: '12px',
                height: '12px',
                borderRadius: '50%',
                background: 'rgba(255,255,255,0.6)',
                position: 'relative',
                zIndex: 1
              }}></div>
            </div>

            {/* Content with Enhanced Animations and Selection */}
            <div style={{
              padding: '2rem',
              background: '#ffffff',
              maxHeight: '600px',
              overflowY: 'auto',
              scrollBehavior: 'smooth'
            }}>
              {/* Selection Info Bar */}
              {selectedCandidates.size > 0 && (
                <motion.div
                  initial={{ opacity: 0, y: -20 }}
                  animate={{ opacity: 1, y: 0 }}
                  style={{
                    background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
                    color: '#ffffff',
                    padding: '1rem 1.5rem',
                    borderRadius: '12px',
                    marginBottom: '1.5rem',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    boxShadow: '0 4px 15px rgba(59, 130, 246, 0.3)'
                  }}
                >
                  <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                    <span style={{ fontSize: '1.2rem' }}>✅</span>
                    <span style={{ fontWeight: '600' }}>
                      {selectedCandidates.size} candidate{selectedCandidates.size > 1 ? 's' : ''} selected
                    </span>
                  </div>
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => setSelectedCandidates(new Set())}
                    style={{
                      background: 'rgba(255, 255, 255, 0.2)',
                      border: '1px solid rgba(255, 255, 255, 0.3)',
                      color: '#ffffff',
                      padding: '0.5rem 1rem',
                      borderRadius: '8px',
                      fontSize: '0.85rem',
                      fontWeight: '600',
                      cursor: 'pointer'
                    }}
                  >
                    Clear All
                  </motion.button>
                </motion.div>
              )}

              <div style={{
                display: 'flex',
                flexDirection: 'column',
                gap: '1.25rem'
              }}>
                {topReferrersByReach.slice(0, 8).map((user, index) => {
                  const maxReach = topReferrersByReach[0]?.referralCount || 1;
                  const percentage = (user.referralCount / maxReach) * 100;
                  const isTopPerformer = index < 3;
                  const isSelected = selectedCandidates.has(user.userId);
                  
                  return (
                    <motion.div 
                      key={user.userId}
                      initial={{ opacity: 0, x: -50, scale: 0.9 }}
                      animate={{ 
                        opacity: 1, 
                        x: 0, 
                        scale: isSelected ? 1.02 : 1,
                        y: isSelected ? -2 : 0
                      }}
                      transition={{ 
                        duration: 0.5, 
                        delay: index * 0.1,
                        type: "spring",
                        stiffness: 100
                      }}
                      whileHover={{ 
                        scale: isSelected ? 1.04 : 1.02, 
                        y: -4,
                        transition: { duration: 0.2 }
                      }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => toggleCandidateSelection(user.userId)}
                      style={{
                        display: 'flex',
                        alignItems: 'center',
                        padding: '1.5rem',
                        background: isSelected ? 
                          'linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%)' :
                          isTopPerformer ? 
                            'linear-gradient(135deg, #fef3c7 0%, #fde68a 100%)' : 
                            '#f8fafc',
                        borderRadius: '18px',
                        border: isSelected ?
                          '2px solid #3b82f6' :
                          isTopPerformer ? 
                            '2px solid #f59e0b' : 
                            '1px solid rgba(0, 0, 0, 0.06)',
                        boxShadow: isSelected ?
                          '0 12px 30px rgba(59, 130, 246, 0.2)' :
                          isTopPerformer ? 
                            '0 8px 25px rgba(245, 158, 11, 0.15)' : 
                            '0 4px 15px rgba(0, 0, 0, 0.04)',
                        position: 'relative',
                        overflow: 'hidden',
                        cursor: 'pointer',
                        transform: `translateY(${Math.sin(Date.now() * 0.001 + index) * 2}px)`,
                        animation: `float ${3 + index * 0.5}s ease-in-out infinite`
                      }}
                    >
                      {/* Selection Indicator */}
                      <motion.div
                        initial={{ scale: 0 }}
                        animate={{ scale: isSelected ? 1 : 0 }}
                        style={{
                          position: 'absolute',
                          top: '1rem',
                          right: '1rem',
                          width: '24px',
                          height: '24px',
                          borderRadius: '50%',
                          background: '#3b82f6',
                          color: '#ffffff',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          fontSize: '0.75rem',
                          fontWeight: '800',
                          zIndex: 2
                        }}
                      >
                        ✓
                      </motion.div>

                      {/* Moving Background Effect */}
                      <motion.div
                        animate={{ 
                          background: [
                            'linear-gradient(90deg, rgba(59,130,246,0.05) 0%, rgba(59,130,246,0.1) 50%, rgba(59,130,246,0.05) 100%)',
                            'linear-gradient(90deg, rgba(59,130,246,0.1) 0%, rgba(59,130,246,0.05) 50%, rgba(59,130,246,0.1) 100%)'
                          ]
                        }}
                        transition={{ duration: 2, repeat: Infinity, ease: 'easeInOut' }}
                        style={{
                          position: 'absolute',
                          top: 0,
                          left: 0,
                          right: 0,
                          bottom: 0,
                          opacity: isSelected ? 1 : 0,
                          zIndex: 0
                        }}
                      />

                      {/* Rank Badge with Enhanced Animation */}
                      <motion.div
                        animate={{ 
                          rotateY: [0, 360],
                          scale: [1, 1.1, 1]
                        }}
                        transition={{ 
                          rotateY: { duration: 4, repeat: Infinity, ease: 'linear' },
                          scale: { duration: 2, repeat: Infinity, delay: index * 0.2 }
                        }}
                        style={{
                          width: '55px',
                          height: '55px',
                          borderRadius: '50%',
                          background: isSelected ?
                            'linear-gradient(135deg, #3b82f6, #1d4ed8)' :
                            index === 0 ? 
                              'linear-gradient(135deg, #fbbf24, #f59e0b)' : 
                              index === 1 ?
                                'linear-gradient(135deg, #9ca3af, #6b7280)' :
                                index === 2 ?
                                  'linear-gradient(135deg, #d97706, #b45309)' :
                                  'linear-gradient(135deg, #3b82f6, #2563eb)',
                          color: '#ffffff',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          fontSize: '1.2rem',
                          fontWeight: '800',
                          boxShadow: '0 6px 20px rgba(0, 0, 0, 0.2)',
                          marginRight: '1.5rem',
                          flexShrink: 0,
                          zIndex: 1,
                          position: 'relative'
                        }}
                      >
                        {index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : `#${index + 1}`}
                      </motion.div>

                      {/* User Info and Enhanced Progress */}
                      <div style={{ flex: 1, zIndex: 1, position: 'relative' }}>
                        {/* User Name and ID */}
                        <div style={{
                          display: 'flex',
                          justifyContent: 'space-between',
                          alignItems: 'center',
                          marginBottom: '0.75rem'
                        }}>
                          <div>
                            <motion.div
                              animate={{ 
                                color: isSelected ? ['#1d4ed8', '#3b82f6', '#1d4ed8'] : '#1e293b'
                              }}
                              transition={{ duration: 1.5, repeat: Infinity }}
                              style={{
                                fontSize: '1.1rem',
                                fontWeight: '700',
                                marginBottom: '0.25rem'
                              }}
                            >
                              User {user.userId.slice(-8)}
                            </motion.div>
                            <div style={{
                              fontSize: '0.85rem',
                              color: isSelected ? '#3b82f6' : '#64748b',
                              fontWeight: '500'
                            }}>
                              {isSelected ? 'Selected Candidate' : 'Network Specialist'}
                            </div>
                          </div>
                          <div style={{
                            display: 'flex',
                            alignItems: 'center',
                            gap: '0.5rem'
                          }}>
                            <motion.div
                              animate={{ 
                                scale: [1, 1.2, 1],
                                color: isSelected ? 
                                  ['#3b82f6', '#1d4ed8', '#3b82f6'] :
                                  isTopPerformer ? '#f59e0b' : '#3b82f6'
                              }}
                              transition={{ 
                                duration: 2, 
                                repeat: Infinity, 
                                delay: index * 0.2 
                              }}
                              style={{
                                fontSize: '1.6rem',
                                fontWeight: '800'
                              }}
                            >
                              {user.referralCount}
                            </motion.div>
                            <div style={{
                              fontSize: '0.75rem',
                              color: '#64748b',
                              fontWeight: '600',
                              textTransform: 'uppercase',
                              letterSpacing: '0.5px'
                            }}>
                              Referrals
                            </div>
                          </div>
                        </div>

                        {/* Enhanced Animated Progress Bar */}
                        <div style={{
                          position: 'relative',
                          width: '100%',
                          height: '10px',
                          background: 'rgba(0, 0, 0, 0.08)',
                          borderRadius: '5px',
                          overflow: 'hidden'
                        }}>
                          <motion.div
                            initial={{ width: 0 }}
                            animate={{ width: `${percentage}%` }}
                            transition={{ 
                              duration: 2, 
                              delay: 0.5 + index * 0.1,
                              ease: 'easeOut'
                            }}
                            style={{
                              height: '100%',
                              background: isSelected ?
                                'linear-gradient(90deg, #3b82f6, #1d4ed8)' :
                                isTopPerformer ?
                                  'linear-gradient(90deg, #f59e0b, #fbbf24)' :
                                  'linear-gradient(90deg, #3b82f6, #60a5fa)',
                              borderRadius: '5px',
                              position: 'relative'
                            }}
                          >
                            {/* Multiple Moving Shine Effects */}
                            <motion.div
                              animate={{ x: ['-120%', '120%'] }}
                              transition={{ 
                                duration: 2.5, 
                                repeat: Infinity, 
                                delay: 1 + index * 0.3,
                                ease: 'linear'
                              }}
                              style={{
                                position: 'absolute',
                                top: 0,
                                left: 0,
                                width: '40%',
                                height: '100%',
                                background: 'linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.6), transparent)',
                                borderRadius: '5px'
                              }}
                            />
                            
                            {/* Pulsing Glow Effect */}
                            <motion.div
                              animate={{ 
                                opacity: [0.3, 0.8, 0.3],
                                scale: [1, 1.02, 1]
                              }}
                              transition={{ 
                                duration: 1.8, 
                                repeat: Infinity,
                                delay: index * 0.4
                              }}
                              style={{
                                position: 'absolute',
                                top: 0,
                                left: 0,
                                right: 0,
                                bottom: 0,
                                background: 'rgba(255, 255, 255, 0.3)',
                                borderRadius: '5px'
                              }}
                            />
                          </motion.div>
                        </div>

                        {/* Enhanced Performance Badge and Stats */}
                        <div style={{
                          display: 'flex',
                          justifyContent: 'space-between',
                          alignItems: 'center',
                          marginTop: '0.75rem'
                        }}>
                          <motion.div
                            whileHover={{ scale: 1.05 }}
                            style={{
                              display: 'inline-flex',
                              alignItems: 'center',
                              gap: '0.5rem',
                              padding: '0.3rem 0.8rem',
                              background: isSelected ?
                                'rgba(59, 130, 246, 0.15)' :
                                isTopPerformer ? 
                                  'rgba(245, 158, 11, 0.1)' : 
                                  'rgba(59, 130, 246, 0.1)',
                              color: isSelected ? '#1d4ed8' : isTopPerformer ? '#f59e0b' : '#3b82f6',
                              borderRadius: '15px',
                              fontSize: '0.75rem',
                              fontWeight: '600',
                              border: `1px solid ${isSelected ? '#3b82f6' : isTopPerformer ? '#f59e0b' : '#3b82f6'}20`
                            }}
                          >
                            {isSelected ? '✅ Selected' : isTopPerformer ? '⭐ Top Performer' : '📈 Growing'}
                          </motion.div>
                          <motion.div
                            animate={{ 
                              opacity: [0.7, 1, 0.7],
                              scale: [1, 1.05, 1]
                            }}
                            transition={{ 
                              duration: 2, 
                              repeat: Infinity,
                              delay: index * 0.3
                            }}
                            style={{
                              fontSize: '0.8rem',
                              color: isSelected ? '#3b82f6' : '#64748b',
                              fontWeight: '600'
                            }}
                          >
                            {percentage.toFixed(1)}% of max
                          </motion.div>
                        </div>
                      </div>
                    </motion.div>
                  );
                })}
              </div>
            </div>
          </motion.div>
        </div>

        {/* BFS Algorithm Explanation Card */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.4 }}
          style={{
            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 50%, #667eea 100%)',
            backgroundSize: '200% 200%',
            animation: 'gradient-shift 20s ease infinite',
            padding: '2rem',
            borderRadius: '25px',
            boxShadow: '0 25px 50px rgba(102, 126, 234, 0.3)',
            border: '1px solid rgba(255, 255, 255, 0.2)',
            marginTop: '2rem',
            position: 'relative',
            overflow: 'hidden'
          }}
        >
          <div style={{
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            background: 'radial-gradient(circle at 15% 85%, rgba(255,255,255,0.08) 0%, transparent 50%), radial-gradient(circle at 85% 15%, rgba(255,255,255,0.08) 0%, transparent 50%)',
            animation: 'float 25s ease-in-out infinite reverse',
            zIndex: 0
          }}></div>
          
          <h4 style={{
            color: '#ffffff',
            fontSize: '1.3rem',
            fontWeight: '700',
            marginBottom: '1rem',
            position: 'relative',
            zIndex: 1,
            background: 'linear-gradient(90deg, #fff 0%, #f0f8ff 50%, #fff 100%)',
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent',
            backgroundSize: '200% 100%',
            animation: 'gradient-shift 6s ease infinite'
          }}>
            🧠 BFS Algorithm Implementation
          </h4>
          <p style={{
            color: 'rgba(255, 255, 255, 0.9)',
            lineHeight: '1.6',
            fontSize: '1rem',
            margin: 0,
            position: 'relative',
            zIndex: 1,
            textShadow: '0 1px 2px rgba(0,0,0,0.3)'
          }}>
            <strong>Total Referral Count:</strong> Uses Breadth-First Search (BFS) to traverse the entire referral tree and count all direct and indirect referrals. 
            The algorithm starts from a user and explores all connected nodes level by level, ensuring we capture the complete downstream network reach.
            <br /><br />
            <strong>Top Referrers by Reach:</strong> Ranks users based on their total referral count (direct + indirect). 
            Choose k based on your analysis needs: k=5-10 for executive summaries, k=20-50 for detailed analysis.
          </p>
        </motion.div>
      </div>
    );
  };

  // Influencers Tab
  const renderInfluencers = () => (
    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '2rem' }}>
      {/* Pie Chart Card */}
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.6 }}
        style={{
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          padding: '2rem',
          borderRadius: '20px',
          boxShadow: '0 20px 40px rgba(102, 126, 234, 0.3)',
          border: '1px solid rgba(255, 255, 255, 0.2)'
        }}
      >
        <h3 style={{ 
          background: 'linear-gradient(45deg, #ffffff, #f0f0f0)',
          WebkitBackgroundClip: 'text',
          WebkitTextFillColor: 'transparent',
          backgroundClip: 'text',
          color: 'transparent',
          marginBottom: '1.5rem', 
          fontSize: '1.4rem', 
          fontWeight: '700',
          letterSpacing: '-0.5px'
        }}>
          🌟 Top Influencers
        </h3>
        <motion.div 
          style={{ height: '400px', backgroundColor: 'rgba(255, 255, 255, 0.1)', borderRadius: '15px', padding: '1rem' }}
          whileHover={{ scale: 1.02 }}
          transition={{ duration: 0.3 }}
        >
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                data={stats?.topReferrers?.slice(0, 5).map((user, index) => ({ 
                  name: user.userId.slice(-6), 
                  value: user.referralCount,
                  fill: ['#ff6b6b', '#4ecdc4', '#ffe66d', '#ff8a80', '#81c784'][index % 5]
                })) || []}
                cx="50%"
                cy="50%"
                labelLine={false}
                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                outerRadius={120}
                fill="#000000"
                dataKey="value"
                animationDuration={1500}
              >
                {stats?.topReferrers?.slice(0, 5).map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={['#ff6b6b', '#4ecdc4', '#ffe66d', '#ff8a80', '#81c784'][index % 5]} />
                ))}
              </Pie>
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: 'rgba(255, 255, 255, 0.95)', 
                  border: '1px solid rgba(102, 126, 234, 0.3)',
                  borderRadius: '10px',
                  color: '#667eea',
                  backdropFilter: 'blur(10px)'
                }}
              />
            </PieChart>
          </ResponsiveContainer>
        </motion.div>
      </motion.div>

      {/* Rankings Card */}
      <motion.div
        initial={{ opacity: 0, x: 20 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ duration: 0.6, delay: 0.2 }}
        style={{
          background: '#ffffff',
          padding: '2rem',
          borderRadius: '20px',
          boxShadow: '0 10px 30px rgba(0, 0, 0, 0.1)',
          border: '3px solid #000000'
        }}
      >
        <h3 style={{ 
          color: '#000000',
          marginBottom: '2rem', 
          fontSize: '1.3rem', 
          fontWeight: '700'
        }}>
          🏆 Influencer Rankings
        </h3>
        <div style={{ 
          display: 'flex', 
          flexDirection: 'column', 
          gap: '1rem',
          maxHeight: '400px',
          overflowY: 'auto',
          paddingRight: '0.5rem'
        }}>
          {(stats?.topReferrers?.length > 0 ? stats.topReferrers : [
            { userId: 'user_004', referralCount: 15 }
          ]).slice(0, 8).map((user, index) => (
            <motion.div 
              key={user.userId}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.4, delay: index * 0.1 }}
              whileHover={{ scale: 1.03, x: 10 }}
              style={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
                padding: '1.2rem',
                background: index === 0 ? 
                  'linear-gradient(135deg, #ffd700, #ffed4e)' : 
                  '#f8f9fa',
                borderRadius: '15px',
                border: index === 0 ? '2px solid #ffd700' : '2px solid #e9ecef',
                boxShadow: index === 0 ? '0 10px 30px rgba(255, 215, 0, 0.4)' : '0 5px 15px rgba(0, 0, 0, 0.05)'
              }}
            >
              <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>
                <motion.div
                  whileHover={{ scale: 1.2 }}
                  style={{
                    width: '40px',
                    height: '40px',
                    borderRadius: '50%',
                    background: index === 0 ? 
                      'linear-gradient(135deg, #ff6b6b, #ee5a52)' : 
                      'linear-gradient(135deg, #4ecdc4, #44a08d)',
                    color: '#ffffff',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    fontSize: '1rem',
                    fontWeight: '700',
                    boxShadow: '0 5px 15px rgba(0, 0, 0, 0.2)'
                  }}
                >
                  #{index + 1}
                </motion.div>
                <div>
                  <div style={{ 
                    color: index === 0 ? '#b8860b' : '#000000', 
                    fontWeight: '700', 
                    fontSize: '1rem',
                    marginBottom: '0.25rem'
                  }}>
                    {user.userId}
                  </div>
                  <div style={{ 
                    color: index === 0 ? 'rgba(184, 134, 11, 0.8)' : '#6c757d', 
                    fontSize: '0.85rem',
                    fontWeight: '500'
                  }}>
                    Score: {(user.referralCount * 10).toFixed(1)} ⭐
                  </div>
                </div>
              </div>
              <motion.div 
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{ duration: 0.6, delay: 0.3 + index * 0.1 }}
                style={{ 
                  color: index === 0 ? '#b8860b' : '#000000', 
                  fontWeight: '800', 
                  fontSize: '1.2rem',
                  textShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
                }}
              >
                {user.referralCount} refs
              </motion.div>
            </motion.div>
          ))}
        </div>
      </motion.div>
    </div>
  );

  // Simulation Tab
  const renderSimulation = () => {
    return (
      <div style={{ 
        display: 'grid', 
        gridTemplateColumns: '2fr 1fr', 
        gap: '2rem',
        padding: '1rem',
        minHeight: '600px'
      }}>
      {/* Growth Simulation Chart - Left Side */}
      <motion.div
        initial={{ opacity: 0, x: -20 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ duration: 0.6 }}
        style={{
          background: 'rgba(255, 255, 255, 0.95)',
          borderRadius: '20px',
          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
          border: '1px solid rgba(255, 255, 255, 0.2)',
          overflow: 'hidden',
          backdropFilter: 'blur(20px)'
        }}
      >
        {/* Header */}
        <div style={{
          padding: '1.5rem 2rem 1rem 2rem',
          borderBottom: '1px solid rgba(0, 0, 0, 0.05)'
        }}>
          <div style={{ 
            display: 'flex', 
            alignItems: 'center', 
            gap: '0.75rem',
            marginBottom: '0.5rem'
          }}>
            <div style={{
              width: '32px',
              height: '32px',
              borderRadius: '8px',
              background: 'linear-gradient(135deg, #10b981, #059669)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '1rem'
            }}>
              📊
            </div>
            <h3 style={{ 
              color: '#1e293b',
              fontSize: '1.25rem', 
              fontWeight: '700',
              margin: 0,
              letterSpacing: '-0.02em'
            }}>
              Growth Simulation
            </h3>
          </div>
        </div>

        {/* Chart */}
        <div style={{ 
          padding: '2rem',
          height: '450px'
        }}>
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={simulationData}>
              <defs>
                <linearGradient id="conservativeGradient" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#10b981" stopOpacity={0.1}/>
                  <stop offset="95%" stopColor="#10b981" stopOpacity={0}/>
                </linearGradient>
                <linearGradient id="moderateGradient" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#3b82f6" stopOpacity={0.1}/>
                  <stop offset="95%" stopColor="#3b82f6" stopOpacity={0}/>
                </linearGradient>
                <linearGradient id="aggressiveGradient" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#ef4444" stopOpacity={0.1}/>
                  <stop offset="95%" stopColor="#ef4444" stopOpacity={0}/>
                </linearGradient>
              </defs>
              <CartesianGrid 
                strokeDasharray="3 3" 
                stroke="rgba(0, 0, 0, 0.08)" 
                vertical={false}
              />
              <XAxis 
                dataKey="day" 
                stroke="#64748b" 
                fontSize={11}
                fontWeight="500"
                tick={{ fill: '#64748b' }}
                axisLine={false}
                tickLine={false}
              />
              <YAxis 
                stroke="#64748b" 
                fontSize={11}
                fontWeight="500"
                tick={{ fill: '#64748b' }}
                axisLine={false}
                tickLine={false}
              />
              <Tooltip 
                contentStyle={{ 
                  background: 'rgba(255, 255, 255, 0.98)',
                  border: 'none',
                  borderRadius: '12px',
                  color: '#1e293b',
                  boxShadow: '0 10px 40px rgba(0, 0, 0, 0.15)',
                  backdropFilter: 'blur(20px)',
                  fontSize: '0.875rem',
                  fontWeight: '600'
                }}
                cursor={{ stroke: 'rgba(0, 0, 0, 0.1)', strokeWidth: 1 }}
              />
              <Legend 
                wrapperStyle={{
                  paddingTop: '1rem',
                  fontSize: '0.875rem',
                  fontWeight: '600'
                }}
              />
              <Line 
                type="monotone" 
                dataKey="conservative" 
                stroke="#10b981" 
                strokeWidth={3} 
                name="Conservative (20%)"
                dot={{ fill: '#10b981', strokeWidth: 2, stroke: '#ffffff', r: 4 }}
                activeDot={{ r: 6, fill: '#10b981', stroke: '#ffffff', strokeWidth: 3 }}
                fill="url(#conservativeGradient)"
              />
              <Line 
                type="monotone" 
                dataKey="moderate" 
                stroke="#3b82f6" 
                strokeWidth={3} 
                name="Moderate (35%)"
                dot={{ fill: '#3b82f6', strokeWidth: 2, stroke: '#ffffff', r: 4 }}
                activeDot={{ r: 6, fill: '#3b82f6', stroke: '#ffffff', strokeWidth: 3 }}
                fill="url(#moderateGradient)"
              />
              <Line 
                type="monotone" 
                dataKey="aggressive" 
                stroke="#ef4444" 
                strokeWidth={3} 
                name="Aggressive (50%)"
                dot={{ fill: '#ef4444', strokeWidth: 2, stroke: '#ffffff', r: 4 }}
                activeDot={{ r: 6, fill: '#ef4444', stroke: '#ffffff', strokeWidth: 3 }}
                fill="url(#aggressiveGradient)"
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </motion.div>

      {/* Simulation Controls - Right Side */}
      <motion.div
        initial={{ opacity: 0, x: 20 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ duration: 0.6, delay: 0.2 }}
        style={{
          background: 'linear-gradient(135deg, #fce7f3 0%, #f3e8ff 50%, #fde2e7 100%)',
          borderRadius: '20px',
          boxShadow: '0 8px 32px rgba(236, 72, 153, 0.3)',
          border: '1px solid rgba(255, 255, 255, 0.2)',
          overflow: 'hidden',
          position: 'relative'
        }}
      >
        {/* Animated background */}
        <div style={{
          position: 'absolute',
          top: 0,
          left: 0,
          width: '100%',
          height: '100%',
          background: 'radial-gradient(circle at 30% 20%, rgba(255,255,255,0.1) 0%, transparent 50%), radial-gradient(circle at 80% 80%, rgba(255,255,255,0.1) 0%, transparent 50%)',
          animation: 'float 15s ease-in-out infinite',
          zIndex: 0
        }}></div>

        {/* Header */}
        <div style={{
          padding: '1.5rem 2rem 1rem 2rem',
          position: 'relative',
          zIndex: 1
        }}>
          <div style={{ 
            display: 'flex', 
            alignItems: 'center', 
            gap: '0.75rem',
            marginBottom: '0.5rem'
          }}>
            <div style={{
              width: '32px',
              height: '32px',
              borderRadius: '8px',
              background: 'rgba(131, 24, 67, 0.2)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '1rem'
            }}>
              🎮
            </div>
            <h3 style={{ 
              color: '#831843',
              fontSize: '1.25rem', 
              fontWeight: '900',
              margin: 0,
              textShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
            }}>
              Simulation Controls
            </h3>
          </div>
        </div>

        {/* Controls */}
        <div style={{ 
          padding: '0 2rem 2rem 2rem',
          position: 'relative',
          zIndex: 1
        }}>
          {/* Growth Rate Control */}
          <div style={{
            background: 'rgba(131, 24, 67, 0.15)',
            borderRadius: '16px',
            padding: '1.5rem',
            marginBottom: '1.5rem',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(131, 24, 67, 0.3)'
          }}>
            <div style={{
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem',
              marginBottom: '1rem'
            }}>
              <span style={{ fontSize: '1.2rem' }}>📈</span>
              <div style={{
                color: '#831843',
                fontSize: '1rem',
                fontWeight: '900'
              }}>
                35%
              </div>
            </div>
            <div style={{
              color: '#831843',
              fontSize: '0.75rem',
              fontWeight: '800',
              textTransform: 'uppercase',
              letterSpacing: '0.5px',
              marginBottom: '0.25rem'
            }}>
              Growth Rate
            </div>
            <div style={{
              color: '#9f1239',
              fontSize: '0.8rem',
              fontWeight: '600'
            }}>
              Current simulation rate
            </div>
          </div>

          {/* Time Horizon Control */}
          <div style={{
            background: 'rgba(131, 24, 67, 0.15)',
            borderRadius: '16px',
            padding: '1.5rem',
            marginBottom: '1.5rem',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(131, 24, 67, 0.3)'
          }}>
            <div style={{
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem',
              marginBottom: '1rem'
            }}>
              <span style={{ fontSize: '1.2rem' }}>⏰</span>
              <div style={{
                color: '#831843',
                fontSize: '1rem',
                fontWeight: '900'
              }}>
                30 days
              </div>
            </div>
            <div style={{
              color: '#831843',
              fontSize: '0.75rem',
              fontWeight: '800',
              textTransform: 'uppercase',
              letterSpacing: '0.5px',
              marginBottom: '0.25rem'
            }}>
              Time Horizon
            </div>
            <div style={{
              color: '#9f1239',
              fontSize: '0.8rem',
              fontWeight: '600'
            }}>
              Projection period
            </div>
          </div>

          {/* Expected Users Control */}
          <div style={{
            background: 'rgba(131, 24, 67, 0.15)',
            borderRadius: '16px',
            padding: '1.5rem',
            marginBottom: '1.5rem',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(131, 24, 67, 0.3)'
          }}>
            <div style={{
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem',
              marginBottom: '1rem'
            }}>
              <span style={{ fontSize: '1.2rem' }}>👥</span>
              <div style={{
                color: '#831843',
                fontSize: '1rem',
                fontWeight: '900'
              }}>
                1,074
              </div>
            </div>
            <div style={{
              color: '#831843',
              fontSize: '0.75rem',
              fontWeight: '800',
              textTransform: 'uppercase',
              letterSpacing: '0.5px',
              marginBottom: '0.25rem'
            }}>
              Expected Users
            </div>
            <div style={{
              color: '#9f1239',
              fontSize: '0.8rem',
              fontWeight: '600'
            }}>
              Projected total
            </div>
          </div>

          {/* Scenario Analysis */}
          <div style={{
            background: 'rgba(131, 24, 67, 0.15)',
            borderRadius: '16px',
            padding: '1.5rem',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(131, 24, 67, 0.3)'
          }}>
            <div style={{
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem',
              marginBottom: '1rem'
            }}>
              <span style={{ fontSize: '1.2rem' }}>🎯</span>
              <div style={{
                color: '#831843',
                fontSize: '1rem',
                fontWeight: '900'
              }}>
                Scenario Analysis
              </div>
            </div>
            
            <div style={{ display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>
              <div style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center'
              }}>
                <span style={{
                  color: '#831843',
                  fontSize: '0.85rem',
                  fontWeight: '700'
                }}>
                  Best Case
                </span>
                <span style={{
                  color: '#10b981',
                  fontSize: '0.85rem',
                  fontWeight: '900'
                }}>
                  +1,375
                </span>
              </div>
              <div style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center'
              }}>
                <span style={{
                  color: '#831843',
                  fontSize: '0.85rem',
                  fontWeight: '700'
                }}>
                  Realistic
                </span>
                <span style={{
                  color: '#3b82f6',
                  fontSize: '0.85rem',
                  fontWeight: '900'
                }}>
                  +892
                </span>
              </div>
              <div style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center'
              }}>
                <span style={{
                  color: '#831843',
                  fontSize: '0.85rem',
                  fontWeight: '700'
                }}>
                  Conservative
                </span>
                <span style={{
                  color: '#ef4444',
                  fontSize: '0.85rem',
                  fontWeight: '900'
                }}>
                  +645
                </span>
              </div>
            </div>
          </div>
        </motion.div>
      </div>
    );
  };

  // Optimization Tab
  const renderOptimization = () => (
    <div style={{ display: 'flex', flexDirection: 'column', gap: '2rem', padding: '1rem' }}>
      {/* Page Header */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        style={{ marginBottom: '1rem' }}
      >
        <h2 style={{ 
          fontSize: '2rem', 
          fontWeight: '700', 
          color: '#1e293b',
          margin: '0 0 0.5rem 0'
        }}>
          Optimization
        </h2>
        <p style={{ 
          color: '#64748b', 
          fontSize: '1rem', 
          margin: 0 
        }}>
          Analyze and optimize your referral network performance with advanced analytics
        </p>
      </motion.div>

      {/* Optimization Strategies - Blue Section */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        style={{
          background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
          borderRadius: '25px',
          padding: '2rem',
          position: 'relative',
          overflow: 'hidden'
        }}
      >
        {/* Header */}
        <div style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          marginBottom: '2rem'
        }}>
          <h3 style={{ 
            color: '#ffffff', 
            fontSize: '1.5rem', 
            fontWeight: '700',
            margin: 0,
            display: 'flex',
            alignItems: 'center',
            gap: '0.5rem'
          }}>
            💡 Optimization Strategies
          </h3>
        </div>
        
        {/* Strategy Cards Grid */}
        <div style={{ 
          display: 'grid', 
          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', 
          gap: '1.5rem' 
        }}>
          {[
            {
              title: 'Target High-Value Users',
              description: 'Focus on users with the highest referral potential and conversion rates.',
              score: '92%',
              icon: '🎯',
              iconBg: '#ef4444'
            },
            {
              title: 'Improve Conversion Rate', 
              description: 'Optimize the referral process to increase success and engagement rates.',
              score: '87%',
              icon: '🔄',
              iconBg: '#22c55e'
            },
            {
              title: 'Expand Network Reach',
              description: 'Identify and connect isolated user clusters to maximize network effect.',
              score: '81%',
              icon: '👥',
              iconBg: '#3b82f6'
            },
            {
              title: 'Incentive Optimization',
              description: 'Adjust rewards and motivations to maximize user participation.',
              score: '76%',
              icon: '💎',
              iconBg: '#a855f7'
            }
          ].map((strategy, index) => (
            <motion.div
              key={strategy.title}
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
              whileHover={{ scale: 1.02 }}
              style={{
                background: 'rgba(255, 255, 255, 0.1)',
                backdropFilter: 'blur(20px)',
                borderRadius: '16px',
                padding: '1.5rem',
                border: '1px solid rgba(255, 255, 255, 0.2)',
                position: 'relative'
              }}
            >
              {/* Score Badge */}
              <div style={{
                position: 'absolute',
                top: '1rem',
                right: '1rem',
                color: '#ffffff',
                fontSize: '1.5rem',
                fontWeight: '700'
              }}>
                {strategy.score}
              </div>

              {/* Icon */}
              <div style={{
                width: '48px',
                height: '48px',
                borderRadius: '12px',
                background: strategy.iconBg,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: '1.5rem',
                marginBottom: '1rem'
              }}>
                {strategy.icon}
              </div>

              {/* Title */}
              <h4 style={{ 
                color: '#ffffff', 
                fontWeight: '600', 
                fontSize: '1.1rem',
                margin: '0 0 0.75rem 0'
              }}>
                {strategy.title}
              </h4>
              
              {/* Description */}
              <p style={{ 
                color: 'rgba(255, 255, 255, 0.8)', 
                fontSize: '0.9rem', 
                lineHeight: '1.5', 
                margin: '0 0 1rem 0'
              }}>
                {strategy.description}
              </p>

              {/* Progress Bar */}
              <div style={{
                width: '100%',
                height: '4px',
                background: 'rgba(255, 255, 255, 0.2)',
                borderRadius: '2px',
                overflow: 'hidden'
              }}>
                <motion.div
                  initial={{ width: 0 }}
                  animate={{ width: strategy.score }}
                  transition={{ duration: 1.5, delay: 0.5 + index * 0.1 }}
                  style={{
                    height: '100%',
                    background: 'rgba(255, 255, 255, 0.8)',
                    borderRadius: '2px'
                  }}
                />
              </div>
            </motion.div>
          ))}
        </div>
      </motion.div>

      {/* Optimization Results - Pink Section */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.3 }}
        style={{
          background: 'linear-gradient(135deg, #ec4899 0%, #be185d 100%)',
          borderRadius: '25px',
          padding: '2rem',
          minHeight: '400px',
          position: 'relative',
          overflow: 'hidden'
        }}
      >
        {/* Header */}
        <div style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          marginBottom: '2rem'
        }}>
          <h3 style={{ 
            color: '#ffffff', 
            fontSize: '1.5rem', 
            fontWeight: '700',
            margin: 0,
            display: 'flex',
            alignItems: 'center',
            gap: '0.5rem'
          }}>
            📊 Optimization Results
          </h3>
        </div>

        {/* Results Chart */}
        <motion.div 
          style={{ 
            height: '350px', 
            backgroundColor: 'rgba(255, 255, 255, 0.1)', 
            borderRadius: '15px', 
            padding: '1rem',
            backdropFilter: 'blur(20px)',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}
          whileHover={{ scale: 1.01 }}
          transition={{ duration: 0.3 }}
        >
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={[
              { metric: 'Conversion Rate', before: 45, after: 67 },
              { metric: 'Network Reach', before: 78, after: 89 },
              { metric: 'User Engagement', before: 56, after: 73 },
              { metric: 'Referral Success', before: 62, after: 81 }
            ]}>
              <CartesianGrid strokeDasharray="3 3" stroke="rgba(255, 255, 255, 0.2)" />
              <XAxis 
                dataKey="metric" 
                stroke="#ffffff" 
                fontSize={12}
                fontWeight="600"
                interval={0}
                angle={-45}
                textAnchor="end"
                height={80}
              />
              <YAxis stroke="#ffffff" fontSize={12} fontWeight="600" />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: '#ffffff', 
                  border: 'none',
                  borderRadius: '12px',
                  color: '#1e293b',
                  boxShadow: '0 10px 30px rgba(0, 0, 0, 0.2)'
                }}
              />
              <Legend 
                wrapperStyle={{
                  color: '#ffffff',
                  fontWeight: '600'
                }}
              />
              <Bar 
                dataKey="before" 
                fill="rgba(255, 255, 255, 0.4)" 
                name="Before Optimization" 
                radius={[6, 6, 0, 0]}
                animationDuration={1500}
              />
              <Bar 
                dataKey="after" 
                fill="rgba(255, 255, 255, 0.9)" 
                name="After Optimization" 
                radius={[6, 6, 0, 0]}
                animationDuration={2000}
              />
            </BarChart>
          </ResponsiveContainer>
        </motion.div>

        {/* Performance Metrics */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.8, delay: 0.8 }}
          style={{
            marginTop: '2rem',
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',
            gap: '1rem'
          }}
        >
          {[
            { label: 'Overall Improvement', value: '+28%', icon: '🚀' },
            { label: 'ROI Increase', value: '+156%', icon: '💰' },
            { label: 'User Satisfaction', value: '+34%', icon: '😊' },
            { label: 'Network Health', value: '+42%', icon: '💪' }
          ].map((metric, index) => (
            <motion.div
              key={metric.label}
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.5, delay: 1 + index * 0.1 }}
              whileHover={{ scale: 1.05 }}
              style={{
                background: 'rgba(255, 255, 255, 0.15)',
                padding: '1rem',
                borderRadius: '12px',
                textAlign: 'center',
                backdropFilter: 'blur(10px)',
                border: '1px solid rgba(255, 255, 255, 0.2)'
              }}
            >
              <div style={{ fontSize: '1.5rem', marginBottom: '0.5rem' }}>{metric.icon}</div>
              <div style={{ 
                fontSize: '1.5rem', 
                fontWeight: '800', 
                color: '#ffffff',
                textShadow: '0 2px 4px rgba(0, 0, 0, 0.2)',
                marginBottom: '0.25rem'
              }}>
                {metric.value}
              </div>
              <div style={{ 
                fontSize: '0.75rem', 
                color: 'rgba(255, 255, 255, 0.8)',
                fontWeight: '600',
                textTransform: 'uppercase',
                letterSpacing: '0.5px'
              }}>
                {metric.label}
              </div>
            </motion.div>
          ))}
        </motion.div>
      </motion.div>
    </div>
  );

  return (
    <div style={{ 
      display: 'flex',
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 25%, #e0f2fe 50%, #f8fafc 75%, #ffffff 100%)',
      fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif',
      width: '100vw',
      overflow: 'hidden'
    }}>
      {/* Sidebar */}
      <motion.div 
        initial={{ x: -250 }}
        animate={{ 
          x: !sidebarVisible ? -250 : (sidebarOpen ? 0 : -200),
          opacity: sidebarVisible ? 1 : 0
        }}
        transition={{ duration: 0.3, ease: "easeInOut" }}
        style={{
          width: sidebarOpen ? '250px' : '50px',
          backgroundColor: '#000000',
          height: '100vh',
          position: 'fixed',
          left: 0,
          top: 0,
          zIndex: 1000,
          overflow: 'hidden',
          transition: 'width 0.3s ease',
          display: sidebarVisible ? 'block' : 'none'
        }}
      >
        {/* Sidebar Header */}
        <div style={{
          padding: '1rem',
          borderBottom: '1px solid #333',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between'
        }}>
          {sidebarOpen && (
            <h2 style={{
              color: '#ffffff',
              fontSize: '1.2rem',
              fontWeight: '600',
              margin: 0
            }}>
              Referral Network
            </h2>
          )}
          <button
            onClick={() => setSidebarOpen(!sidebarOpen)}
            style={{
              background: 'none',
              border: 'none',
              color: '#ffffff',
              cursor: 'pointer',
              padding: '0.5rem'
            }}
          >
            {sidebarOpen ? <X size={20} /> : <Menu size={20} />}
          </button>
        </div>

        {/* Navigation Items */}
        <nav style={{ padding: '1rem 0' }}>
          {navigationItems.map((item) => {
            const Icon = item.icon;
            const isActive = activeTab === item.id;
            
            return (
              <motion.button
                key={item.id}
                onClick={() => setActiveTab(item.id)}
                whileHover={{ backgroundColor: '#333' }}
                whileTap={{ scale: 0.95 }}
                style={{
                  width: '100%',
                  padding: '0.75rem 1rem',
                  backgroundColor: isActive ? '#333' : 'transparent',
                  border: 'none',
                  color: '#ffffff',
                  display: 'flex',
                  alignItems: 'center',
                  cursor: 'pointer',
                  transition: 'all 0.2s ease',
                  borderLeft: isActive ? '3px solid #ffffff' : '3px solid transparent'
                }}
              >
                <Icon size={20} />
                {sidebarOpen && (
                  <span style={{ marginLeft: '0.75rem', fontSize: '0.9rem' }}>
                    {item.label}
                  </span>
                )}
              </motion.button>
            );
          })}
        </nav>
      </motion.div>

      {/* Main Content */}
      <div style={{
        marginLeft: !sidebarVisible ? '0' : (sidebarOpen ? '250px' : '50px'),
        flex: 1,
        transition: 'margin-left 0.3s ease',
        backgroundColor: '#f8f9fa',
        minHeight: '100vh',
        width: !sidebarVisible ? '100vw' : `calc(100vw - ${sidebarOpen ? '250px' : '50px'})`
      }}>
        {/* Header */}
        <div 
          className="dashboard-header"
          style={{
          background: 'linear-gradient(135deg, #ffffff 0%, #f8f9fa 50%, #ffffff 100%)',
          backgroundSize: '200% 200%',
          animation: 'gradient-shift 10s ease infinite',
          padding: '2rem 2rem',
          borderBottom: '1px solid #e5e7eb',
          boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',
          position: 'relative',
          overflow: 'hidden'
        }}>
          {/* Animated background elements */}
          <div style={{
            position: 'absolute',
            top: '-50%',
            right: '-50%',
            width: '200%',
            height: '200%',
            background: 'radial-gradient(circle, rgba(102, 126, 234, 0.1) 0%, transparent 50%)',
            animation: 'pulse 4s ease-in-out infinite'
          }} />
          
          <motion.h1 
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            style={{
              fontSize: '2.5rem',
              fontWeight: '800',
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              backgroundClip: 'text',
              margin: 0,
              textTransform: 'capitalize',
              position: 'relative',
              zIndex: 1
            }}
          >
            {navigationItems.find(item => item.id === activeTab)?.label || 'Dashboard'}
          </motion.h1>
          <motion.p 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.2, duration: 0.5 }}
            style={{
              background: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              backgroundClip: 'text',
              margin: '0.5rem 0 0 0',
              fontSize: '1.1rem',
              fontWeight: '500',
              position: 'relative',
              zIndex: 1
            }}
          >
            Analyze and optimize your referral network performance with advanced analytics
          </motion.p>

          {/* Dashboard Controls */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4, duration: 0.5 }}
            style={{
              position: 'absolute',
              top: '2rem',
              right: '2rem',
              display: 'flex',
              gap: '1rem',
              zIndex: 10,
              className: 'sidebar-controls'
            }}
          >
            {/* Sidebar Toggle */}
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setSidebarOpen(!sidebarOpen)}
              style={{
                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                border: 'none',
                borderRadius: '12px',
                padding: '0.8rem 1.2rem',
                color: '#ffffff',
                fontSize: '0.9rem',
                fontWeight: '600',
                cursor: 'pointer',
                boxShadow: '0 4px 15px rgba(102, 126, 234, 0.3)',
                backdropFilter: 'blur(10px)',
                display: sidebarVisible ? 'block' : 'none'
              }}
              title={sidebarOpen ? 'Collapse Sidebar' : 'Expand Sidebar'}
            >
              {sidebarOpen ? '← Collapse' : '→ Expand'}
            </motion.button>

            {/* Full Screen Toggle */}
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setSidebarVisible(!sidebarVisible)}
              style={{
                background: sidebarVisible 
                  ? 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)'
                  : 'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)',
                border: 'none',
                borderRadius: '12px',
                padding: '0.8rem 1.2rem',
                color: '#ffffff',
                fontSize: '0.9rem',
                fontWeight: '600',
                cursor: 'pointer',
                boxShadow: sidebarVisible 
                  ? '0 4px 15px rgba(240, 147, 251, 0.3)'
                  : '0 4px 15px rgba(67, 233, 123, 0.3)',
                backdropFilter: 'blur(10px)'
              }}
              title={sidebarVisible ? 'Full Screen Mode' : 'Show Sidebar'}
            >
              {sidebarVisible ? '⛶ Full Screen' : '☰ Show Menu'}
            </motion.button>

            {/* View Mode Toggle */}
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              style={{
                background: 'linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)',
                border: 'none',
                borderRadius: '12px',
                padding: '0.8rem 1.2rem',
                color: '#8B4513',
                fontSize: '0.9rem',
                fontWeight: '600',
                cursor: 'pointer',
                boxShadow: '0 4px 15px rgba(255, 236, 210, 0.3)',
                backdropFilter: 'blur(10px)'
              }}
              title="Adjust Layout"
            >
              ⚙ Layout
            </motion.button>
          </motion.div>
          
          {/* Enhanced floating gradient orbs with CSS animations */}
          <motion.div
            style={{
              position: 'absolute',
              top: '15%',
              right: '8%',
              width: '80px',
              height: '80px',
              background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
              borderRadius: '50%',
              opacity: 0.15,
              zIndex: 0,
              animation: 'float 8s ease-in-out infinite, pulse-glow 4s ease-in-out infinite alternate'
            }}
          />
          <motion.div
            style={{
              position: 'absolute',
              bottom: '15%',
              right: '3%',
              width: '60px',
              height: '60px',
              background: 'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)',
              borderRadius: '50%',
              opacity: 0.12,
              zIndex: 0,
              animation: 'float 10s ease-in-out infinite reverse, pulse-glow 5s ease-in-out infinite alternate-reverse',
              animationDelay: '2s'
            }}
          />
          <motion.div
            style={{
              position: 'absolute',
              top: '50%',
              right: '15%',
              width: '45px',
              height: '45px',
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              borderRadius: '50%',
              opacity: 0.1,
              zIndex: 0,
              animation: 'float 12s ease-in-out infinite, pulse-glow 6s ease-in-out infinite',
              animationDelay: '4s'
            }}
          />
          <motion.div
            style={{
              position: 'absolute',
              top: '30%',
              left: '3%',
              width: '70px',
              height: '70px',
              background: 'linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)',
              borderRadius: '50%',
              opacity: 0.08,
              zIndex: 0,
              animation: 'float 9s ease-in-out infinite reverse, pulse-glow 3.5s ease-in-out infinite',
              animationDelay: '1s'
            }}
          />
          <motion.div
            style={{
              position: 'absolute',
              bottom: '25%',
              left: '8%',
              width: '55px',
              height: '55px',
              background: 'linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)',
              borderRadius: '50%',
              opacity: 0.1,
              zIndex: 0,
              animation: 'float 11s ease-in-out infinite, pulse-glow 4.5s ease-in-out infinite alternate',
              animationDelay: '3s'
            }}
          />
        </div>

        {/* Floating Control Panel (when sidebar is hidden) */}
        {!sidebarVisible && (
          <motion.div
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.3 }}
            style={{
              position: 'fixed',
              top: '50%',
              left: '20px',
              transform: 'translateY(-50%)',
              background: 'linear-gradient(135deg, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0.9) 100%)',
              borderRadius: '20px',
              padding: '1rem',
              zIndex: 1001,
              backdropFilter: 'blur(15px)',
              border: '1px solid rgba(255,255,255,0.1)',
              boxShadow: '0 10px 30px rgba(0,0,0,0.3)',
              display: 'flex',
              flexDirection: 'column',
              gap: '0.5rem'
            }}
          >
            {/* Navigation in floating panel */}
            {navigationItems.map((item) => (
              <motion.button
                key={item.id}
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => setActiveTab(item.id)}
                style={{
                  background: activeTab === item.id 
                    ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
                    : 'transparent',
                  border: 'none',
                  borderRadius: '12px',
                  padding: '0.8rem',
                  color: '#ffffff',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  transition: 'all 0.2s ease',
                  width: '50px',
                  height: '50px'
                }}
                title={item.label}
              >
                <item.icon size={20} />
              </motion.button>
            ))}
            
            {/* Show Sidebar Button */}
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setSidebarVisible(true)}
              style={{
                background: 'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)',
                border: 'none',
                borderRadius: '12px',
                padding: '0.8rem',
                color: '#ffffff',
                cursor: 'pointer',
                marginTop: '0.5rem',
                width: '50px',
                height: '50px',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}
              title="Show Sidebar"
            >
              ☰
            </motion.button>
          </motion.div>
        )}

        {/* Content Area */}
        <div style={{ padding: '2rem', width: '100%', maxWidth: '100%' }}>
          {loading ? (
            <div style={{
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center',
              minHeight: '500px',
              flexDirection: 'column',
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              borderRadius: '20px',
              margin: '2rem',
              boxShadow: '0 20px 40px rgba(0,0,0,0.1)'
            }}>
              <motion.div
                animate={{ 
                  rotate: 360,
                  scale: [1, 1.1, 1],
                }}
                transition={{ 
                  duration: 1, 
                  repeat: Infinity, 
                  ease: "linear",
                  scale: { duration: 2, repeat: Infinity }
                }}
                style={{
                  width: '60px',
                  height: '60px',
                  border: '4px solid rgba(255,255,255,0.3)',
                  borderTop: '4px solid #ffffff',
                  borderRadius: '50%',
                  marginBottom: '2rem'
                }}
              />
              <motion.p 
                animate={{ opacity: [0.7, 1, 0.7] }}
                transition={{ duration: 1.5, repeat: Infinity }}
                style={{ 
                  color: '#ffffff', 
                  fontSize: '1.3rem', 
                  fontWeight: '600',
                  textAlign: 'center',
                  textShadow: '0 2px 4px rgba(0,0,0,0.3)'
                }}
              >
                Initializing Network Analytics...
              </motion.p>
              <motion.div
                animate={{ width: ['0%', '100%', '0%'] }}
                transition={{ duration: 2, repeat: Infinity }}
                style={{
                  height: '4px',
                  background: 'rgba(255,255,255,0.5)',
                  borderRadius: '2px',
                  marginTop: '1rem',
                  width: '200px'
                }}
              />
            </div>
          ) : (
            <AnimatePresence mode="wait">
              <motion.div
                key={activeTab}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
              >
                {renderContent()}
              </motion.div>
            </AnimatePresence>
          )}
        </div>
      </div>

      {/* Floating Dock */}
      <FloatingDock
        items={[
          {
            title: "Dashboard",
            icon: <HomeIcon />,
            onClick: () => setActiveTab('overview')
          },
          {
            title: "Network Graph",
            icon: <NetworkIcon />,
            onClick: () => setActiveTab('structure')
          },
          {
            title: "Analytics",
            icon: <ChartIcon />,
            onClick: () => setActiveTab('bfs')
          },
          {
            title: "Influencers",
            icon: <UserGroupIcon />,
            onClick: () => setActiveTab('influencers')
          },
          {
            title: "Growth Simulation",
            icon: <GraphIcon />,
            onClick: () => setActiveTab('simulation')
          },
          {
            title: "Toggle Sidebar",
            icon: <SidebarIcon />,
            onClick: () => setSidebarVisible(!sidebarVisible)
          },
          {
            title: sidebarOpen ? "Collapse" : "Expand",
            icon: sidebarOpen ? <CollapseIcon /> : <ExpandIcon />,
            onClick: () => setSidebarOpen(!sidebarOpen)
          }
        ]}
        desktopClassName="fixed bottom-8 left-1/2 -translate-x-1/2 z-50"
        mobileClassName="fixed bottom-8 right-8 z-50"
      />
    </div>
  );
};

export default ReferralDashboard;
